{
  "codegen.yml": {
    "prefix": "codegen.yml",
    "body": [
      "overwrite: true",
      "schema: 'src/schema/*.ts'",
      "generates:",
      "  src/generated/graphql.ts:",
      "    documents: {}",
      "    plugins:",
      "      - 'typescript'",
      "      - 'typescript-resolvers'",
      "    config:",
      "      contextType: ../context#Context",
      "      useIndexSignature: true",
      "      maybeValue: T | undefined",
      "      optionalInfoArgument: true",
      "      noSchemaStitching: true",
      "      mappers:",
      "        Environment: '../prisma/client#environment'",
      "        Imap: '../prisma/client#imap'",
      "        WebAddress: '../prisma/client#web_address'",
      "        ConnectUser: '../prisma/client#connect_user'",
      "        UserLogin: '../prisma/client#user_login'",
      "        Service: '../prisma/client#service'",
      "        WwsUser: '../prisma/client#wws_user'",
      "        Connector: '../prisma/client#connector'",
      "  ../frontend/src/api/${1:apiName}/generated.tsx:",
      "    documents: '../frontend/src/api/${1}/gql/**/*.ts'",
      "    config:",
      "      reactApolloVersion: 3",
      "      # immutableTypes: true",
      "      skipTypename: false # Does not add __typename to the generated types, unless it was specified in the selection set. in the selection set.",
      "      # addUnderscoreToArgsType: true",
      "      preResolveTypes: true # Avoid using Pick and resolve the actual primitive type of all selection set.",
      "      # flattenGeneratedTypes: true # Flatten fragment spread and inline fragments into a simple selection set before generating.",
      "      # declarationKind: 'interface' # Overrides the default output for various GraphQL elements.",
      "      namingConvention: pascal-case#pascalCase # Allow you to override the naming convention of the output. You can either override all namings, or specify an object with specific custom naming convention per output. The format of the converter must be a valid module#method. Allowed values for specific output are: typeNames, enumValues. You can also use \"keep\" to keep all GraphQL names as-is. Additionally you can set transformUnderscore to true if you want to override the default behaviour, which is to preserves underscores.",
      "      maybeValue: T | undefined # Allow to override the type value of Maybe. T | null",
      "      # gqlImport: '@apollo/client#gql' # Customize from which module will gql be imported from. This is useful if you want to use modules other than graphql-tag, e.g. graphql.macro.",
      "      ################",
      "      # react apollo #",
      "      ################",
      "      withComponent: false # Customized the output by enabling/disabling the generated Component.",
      "      withHOC: false # Customized the output by enabling/disabling the HOC.",
      "      withHooks: true # Customized the output by enabling/disabling the generated React Hooks.",
      "      withMutationFn: false # Customized the output by enabling/disabling the generated mutation function signature.",
      "      withRefetchFn: true # Enable generating a function to be used with refetchQueries",
      "      withResultType: false # Customized the output by enabling/disabling the generated result type.",
      "      withMutationOptionsType: false # Customized the output by enabling/disabling the generated mutation option type.",
      "      addDocBlocks: true # Allows you to enable/disable the generation of docblocks in generated code. Some IDE's (like VSCode) add extra inline information with docblocks, you can disable this feature if your prefered IDE does not.",
      "    plugins:",
      "      - 'typescript'",
      "      - 'typescript-operations'",
      "      - 'typescript-react-apollo'",
      ""
    ],
    "description": "codegen.yml"
  }
}
