{
  "apollo-server-express": {
    "prefix": "gql-server-setup",
    "body": [
      "import { ApolloServer, ApolloServerExpressConfig } from 'apollo-server-express';",
      "import express, { Express } from 'express';",
      "import cors, { CorsOptions } from 'cors';",
      "",
      "import { resolvers } from '${1:./resolvers}';",
      "import { typeDefs } from '${2:./type-defs}';",
      "import { EOL } from 'os';",
      "import { join } from 'path';",
      "import { Context, createContext } from '${3:./context}';",
      "",
      "const NO_PRODUCTION = !process.env.PRODUCTION ? true : false;",
      "",
      "const corsOptions: CorsOptions = { origin: '*' };",
      "",
      "export const startServer = async (port: number, serverStartedCallback?: () => void) => {",
      "  const config: ApolloServerExpressConfig = {",
      "    typeDefs,",
      "    resolvers,",
      "    context: async (ctx): Promise<Context> => {",
      "      let token: string | undefined = (ctx.req.headers['x-api-key'] as string | undefined) || undefined;",
      "",
      "      return await createContext(token);",
      "    },",
      "    debug: NO_PRODUCTION,",
      "    subscriptions: false,",
      "    playground: true,",
      "    introspection: true,",
      "  };",
      "",
      "  const path = '/graphql';",
      "",
      "  const server = new ApolloServer(config);",
      "  const app = setupExpress(path);",
      "",
      "  server.applyMiddleware({",
      "    app,",
      "    cors: corsOptions,",
      "    path,",
      "  });",
      "",
      "  app.listen(port, () => {",
      "    console.log(",
      "      `Server is up and running. ${EOL}View the Frontend under http://localhost:${port} and ${EOL}the GraphQL Playground under http://localhost:${port}/graphql`",
      "    );",
      "",
      "    if (serverStartedCallback) serverStartedCallback();",
      "  });",
      "};",
      "",
      "const setupExpress = (gqlpath: string): Express => {",
      "  const app = express();",
      "",
      "  app.use(cors(corsOptions));",
      "  app.use(express.static(join(__dirname, 'frontend')));",
      "",
      "  app.get('*', (req, res, next) => {",
      "    // Handle graphql specific routes",
      "    if (req.url == gqlpath) {",
      "      // Return next() so that the GraphQLServer will handle it",
      "      return next();",
      "    }",
      "",
      "    if (NO_PRODUCTION) {",
      "      res.redirect(301, 'http://localhost:3000');",
      "    } else {",
      "      res.sendFile(join(__dirname, 'frontend', 'index.html'));",
      "    }",
      "  });",
      "",
      "  return app;",
      "};",
      ""
    ],
    "description": "apollo-server-express"
  }
}
