{
  "@testing-library/react with custom render": {
    "prefix": "test-utils.ts",
    "body": [
      "import { MockedProvider, MockedResponse } from '@apollo/client/testing';",
      "import { render, RenderResult } from '@testing-library/react';",
      "import React from 'react';",
      "import { Provider } from 'react-redux';",
      "import { Router } from 'react-router';",
      "import { MemoryHistory, createMemoryHistory } from 'history';",
      "import { configureStore } from '@reduxjs/toolkit';",
      "import { RootState, rootReducer } from 'store';",
      "",
      "",
      "export type apolloMocks = {",
      "  // MockedResponse: boolean",
      "  ${0}",
      "};",
      "",
      "export type renderProps = {",
      "  baseStore?: Partial<RootState>;",
      "  apolloMocks?: apolloMocks;",
      "  component: JSX.Element;",
      "};",
      "",
      "export type result = {",
      "  store: RootState;",
      "  history: MemoryHistory;",
      "  component: RenderResult;",
      "};",
      "",
      "const customRender = (props: renderProps): result => {",
      "  const store = createStore(props.baseStore);",
      "  const history = createHistory();",
      "",
      "  const wrapper: React.FC<any> = (wrapperProps) => {",
      "    return (",
      "      <Provider store={store}>",
      "        <Router history={history}>",
      "          <MockedProvider",
      "            mocks={getApolloMocks(props.apolloMocks)}",
      "            addTypename={false}",
      "            defaultOptions={{ watchQuery: { fetchPolicy: 'no-cache' }, query: { fetchPolicy: 'no-cache' } }}>",
      "            {wrapperProps.children}",
      "          </MockedProvider>",
      "        </Router>",
      "      </Provider>",
      "    );",
      "  };",
      "",
      "  const component = render(props.component, { wrapper });",
      "",
      "  return {",
      "    store: store.getState(),",
      "    history,",
      "    component,",
      "  };",
      "};",
      "",
      "const getApolloMocks = (props?: apolloMocks): MockedResponse[] => {",
      "  let result = [];",
      "",
      "  // Should contain functionality to add specifiy MockResponses derived from props",
      "  // if(apolloMocks.prop) result.push(MockedResponse)",
      "  ",
      "  $0",
      "",
      "  return result;",
      "};",
      "",
      "//#region Factories",
      "",
      "const createStore = (baseState?: Partial<RootState>) => configureStore({ reducer: rootReducer, preloadedState: baseState });",
      "",
      "const createHistory = () => createMemoryHistory();",
      "",
      "//#endregion",
      "",
      "// re-export everything",
      "export * from '@testing-library/react';",
      "",
      "// override render method",
      "export { customRender as render };",
      "",
      ""
    ],
    "description": "@testing-library/react with custom render"
  }
}
